#! /usr/bin/env python
#
# Support module generated by PAGE version 4.7
# In conjunction with Tcl version 8.6
#    Aug 10, 2016 07:45:39 PM


import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

def set_Tk_var():
    # These are Tk variables used passed to Tkinter and must be
    # defined before the widgets using them are created.
    global minBunnies
    minBunnies = DoubleVar()

    global maxBunnies
    maxBunnies = DoubleVar()
    maxBunnies.set(20000)

    global stepSize
    stepSize = DoubleVar()
    stepSize.set(1000)

    global minBunniesLabel
    minBunniesLabel = StringVar()
    minBunniesLabel.set(int(round(minBunnies.get())))

    global maxBunniesLabel
    maxBunniesLabel = StringVar()
    maxBunniesLabel.set(int(round(maxBunnies.get())))

    global stepSizeLabel
    stepSizeLabel = StringVar()
    stepSizeLabel.set(int(round(stepSize.get())))

    global animation
    animation = StringVar()

    global scaled
    scaled = StringVar()

    global random
    random = StringVar()

    global rotated
    rotated = StringVar()

    global multitexture
    multitexture = StringVar()

    global texturechange
    texturechange = StringVar()

    global alpha
    alpha = StringVar()

    global hd
    hd = StringVar()
    
    global testList
    testList = [animation,scaled,random,rotated,multitexture,texturechange,alpha,hd]
    

def cmdCheck():
    global tests
    tests = reduce(lambda x,y: concatWithComma(x,y), (map(lambda x: x.get(), testList)))
    if tests == '':
        tests = 'standard'

def concatWithComma(x,y):
    return x+','+y if (x != '' and y != '') else x if x != '' else y

def cmdMaxBunnies(self):
    maxBunniesLabel.set(int(round(maxBunnies.get())))
    if maxBunnies.get() < minBunnies.get():
        minBunnies.set(maxBunnies.get())
        minBunniesLabel.set(int(round(minBunnies.get())))

def cmdMinBunnies(self):
    minBunniesLabel.set(int(round(minBunnies.get())))
    if minBunnies.get() > maxBunnies.get():
        maxBunnies.set(minBunnies.get())
        maxBunniesLabel.set(int(round(maxBunnies.get())))


import testmanager

def cmdRun():
    destroy_window()
    testmanager.run_test(frameworks, tests, int(round(minBunnies.get())), int(round(maxBunnies.get())), int(round(stepSize.get())))
    

def cmdStepSize(self):
    stepSizeLabel.set(int(round(stepSize.get())))

def init(top, gui, *args, **kwargs):
    global w, top_level, root, tests, frameworks
    w = gui
    top_level = top
    root = top
    tests = 'standard'
    frameworks = ['SDL','xna_monogame','LibGDX']

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import bunnysuite_gui
    bunnysuite_gui.vp_start_gui()


