#! /usr/bin/env python
#
# Support module generated by PAGE version 4.7
# In conjunction with Tcl version 8.6
#    Aug 10, 2016 07:45:39 PM
#    Aug 17, 2016 09:47:48 AM


try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

def set_Tk_var():
    # These are Tk variables used passed to Tkinter and must be
    # defined before the widgets using them are created.
    global minBunnies, maxBunnies, stepSize, repetitions, animation, scaled
    global random, rotation, multitexture, texturechange, alpha, hdtexture
    global resolution, teleport, pulsation, thin, rectangles, circles, triangles
    global lines, points, texts, bunnies, no_output, minBunniesEntry, maxBunniesEntry
    global stepSizeEntry, repetitionsEntry, presets, presetsCombobox, tinted, colorchange
    minBunnies = DoubleVar()
    maxBunnies = DoubleVar()
    stepSize = DoubleVar()
    repetitions = DoubleVar()
    animation = StringVar()
    scaled = StringVar()
    random = StringVar()
    rotation = StringVar()
    multitexture = StringVar()
    texturechange = StringVar()
    alpha = StringVar()
    hdtexture = StringVar()
    resolution = StringVar()
    teleport = StringVar()
    pulsation = StringVar()
    tinted = StringVar()
    colorchange = StringVar()
    thin = StringVar()
    rectangles = StringVar()
    circles = StringVar()
    triangles = StringVar()
    lines = StringVar()
    points = StringVar()
    texts = StringVar()
    bunnies = StringVar()
    no_output = StringVar()
    minBunniesEntry = StringVar()
    maxBunniesEntry = StringVar()
    stepSizeEntry = StringVar()
    repetitionsEntry = StringVar()
    presets = StringVar()
    presetsCombobox = StringVar()
    presetsCombobox.trace('w', lambda name, idx, mode: cmdTogglePresets())
    
def init(top, gui, save, deselected):
    global w, top_level, root, frameworks
    w = gui
    top_level = top
    root = top
    
    frameworks = getFrameworks()

    # restore framework selection
    restoreFrameworks(deselected, filter(lambda f: f not in deselected, frameworks))
        
    if save != None:
        restore(save)
    else:
        maxBunnies.set(20000)        
        stepSize.set(1000)     
        repetitions.set(10)
        updateEntries()
        bunnies.set("bunnies")
        resolution.set("800x600")
        
def destroy_window():
    # Function which closes the window.
    global top_level
    # Bugfix for a tk bug where a script cannot cancel itself:
    top_level.eval('::ttk::CancelRepeat')
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import bunnysuite_gui
    bunnysuite_gui.vp_start_gui()
    
def cmdUpdateBunniesCheckbox():
    for flavour in getFlavours():
        if flavour != bunnies and flavour.get() != '':
            w.checkBunnies.configure(state="normal")
            return
    w.checkBunnies.configure(state="disabled")
    bunnies.set("bunnies")
    cmdUpdateTextureModifiers()

def cmdUpdateTextureModifiers():
    state = "disabled" if bunnies.get() == '' else "normal"
    if state == "disabled":
        for t in getTextureModifiers():
            t.set("")
            
    # cant get widget from corresponding stringVar :(
    w.checkAlpha.configure(state=state)
    w.checkHd.configure(state=state)
    w.checkThin.configure(state=state)
    w.checkMultitexture.configure(state=state)
    w.checkTexturechange.configure(state=state)
    
    
def cmdChoose():
    moveSelectionToListbox(w.possibleFrameworksList, w.chosenFrameworksList)
    if w.chosenFrameworksList.get(0) != '':
        w.runButton.configure(state="normal")
    
def cmdUnchoose():
    moveSelectionToListbox(w.chosenFrameworksList, w.possibleFrameworksList)
    if w.chosenFrameworksList.get(0) == '':
        w.runButton.configure(state="disabled")

def moveSelectionToListbox(src, dst):
    selectionIndices = src.curselection()
    selected = [src.get(s) for s in selectionIndices]
    for i in range(len(selectionIndices)):
        src.delete(selectionIndices[i]-i)
    for s in selected:
        dst.insert(END, s)
    
def cmdMaxBunnies(self):
    if maxBunnies.get() < minBunnies.get():
        minBunnies.set(maxBunnies.get())
    updateEntries()

def cmdMinBunnies(self):
    if minBunnies.get() > maxBunnies.get():
        maxBunnies.set(minBunnies.get())
    updateEntries()
        
def cmdStepSize(self):
    updateEntries()

def cmdRepetitions(self):
    updateEntries()
    
def cmdTogglePresets():
    # enable or disable presets combobox and save button 
    comboboxState = "normal" if presets.get() == '1' else "disabled"
    buttonState = comboboxState if not presetsCombobox.get() == '' else "disabled"
    w.presetsCombobox.configure(state=comboboxState)
    w.saveButton.configure(state=buttonState)
 
def cmdSave():
    # command for save button - generates a save and writes it to presets.csv
    open("presets.csv", "a").close()
    lines = getLinesFromFile("presets.csv")
    f = open("presets.csv", 'w')
    f.write("# Do not edit this file!\n")
    for l in lines: 
        if not l.split(",")[0] == presetsCombobox.get():
            f.write(l+'\n')

    f.write(",".join([presetsCombobox.get()] + generateSave())+"\n")
    f.close()
     
def presetSelection(event):
    # This method gets evaluated each time a preset is selected in the combobox.
    # The selected preset is read from file and the ui state is set respectively.
    lines = getLinesFromFile("presets.csv")
    for l in lines:
        values = l.split(",") 
        if values[0] == presetsCombobox.get():
            restore(values[1:])
    
def generateSave():
    # save ui state as string
    save = [t for t in map(lambda x: x.get(), getModifiers())]
    save.append(minBunniesEntry.get())
    save.append(maxBunniesEntry.get())
    save.append(stepSizeEntry.get())
    save.append(repetitionsEntry.get())
    save.append(resolution.get())
    return save
           
def restore(values):
    # restore ui state from a qualified save string (as generated by generateSave())
    modifiers = getModifiers()    
    modifiersCount = len(modifiers)
    cvalues = values[:modifiersCount]
    for i in range(modifiersCount):
        modifiers[i].set(cvalues[i])
    minBunnies.set(values[modifiersCount])
    maxBunnies.set(values[modifiersCount+1])
    stepSize.set(values[modifiersCount+2])
    repetitions.set(values[modifiersCount+3])
    resolution.set(values[modifiersCount+4])
    
    updateEntries()
    cmdUpdateBunniesCheckbox()
    cmdUpdateTextureModifiers()
    
    
def getLinesFromFile(file):     
    # returns list of the file's lines
    f = open(file, 'r')
    lines = f.read().splitlines()
    f.close()
    return lines[1:]
    
def updatePresets():
    # called each time the presets combobox list is opened
    # reads presets from file and adds them to the combobox
    open("presets.csv", "a").close()
    w.presetsCombobox.configure(values = [l.split(",")[0] for l in getLinesFromFile("presets.csv")])
    
def getActiveModifiers():
    # returns a string of all selected modifier keywords separated by commas
    modifiers = getModifiers()    
    activeModifiers = ''
    for i in range(len(modifiers)):
        x = modifiers[i].get()
        activeModifiers = activeModifiers + ',' + x if (activeModifiers != '' and x != '') else x if x != '' else activeModifiers
        
    if activeModifiers == '':
        activeModifiers = 'standard'
    return activeModifiers

def updateEntries():
    # set values of entries to values of sliders, rounded to next hundreds
    maxBunniesEntry.set(int(round(maxBunnies.get()/100))*100)
    minBunniesEntry.set(int(round(minBunnies.get()/100))*100)
    # if 0, step size is set to 1 to prevent never ending tests
    stepSizeEntry.set(int(round(stepSize.get()/100))*100 or 1)
    repetitionsEntry.set(int(round(repetitions.get())) or 1)


def validateMinBunnies(newVal, eventType):
    return validate(newVal, eventType, minBunnies, minBunniesEntry, 0, 100000)
    
def validateMaxBunnies(newVal, eventType):
    return validate(newVal, eventType, maxBunnies, maxBunniesEntry, 0, 100000)
    
def validateStepSize(newVal, eventType):
    return validate(newVal, eventType, stepSize, stepSizeEntry, 1, 10000)
    
def validateRepetitions(newVal, eventType):
    return validate(newVal, eventType, repetitions, repetitionsEntry, 1, 100)
    
def validate(newVal, eventType, var, entry, minValue, maxValue):
    if eventType == "focusout":
        value = truncateValue(newVal, minValue, maxValue)
        var.set(value)
        entry.set(value)
        if var == maxBunnies and int(value) < minBunnies.get(): 
            minBunnies.set(value)
            minBunniesEntry.set(value)
        elif var == minBunnies and int(value) > maxBunnies.get():
            maxBunnies.set(value)
            maxBunniesEntry.set(value)
        
    elif eventType == "key":
        try:
            # do not allow non integer characters
            newVal == '' or int(newVal)
            var.set(newVal)
        except:
            return False
            
    return True
    
def truncateValue(value, low, high):
    # returns value or low/high, if value is out of bounds
    if value == '' or int(value) < low:
        return low
    if int(value) > high:
        return high    
    return value

def validatePreset(newVal):
    try:
        # Preset names must not contain non ascii characters.
        newVal.decode('ascii')
        return "," not in newVal
    except:
        return False

def cmdRun():
    # command for run button
    import testmanager

    # calculate some parameters for test execution    
    chosenFrameworks = list(w.chosenFrameworksList.get(0, END))
    deselected = list(w.possibleFrameworksList.get(0, END))
    x, y = resolution.get().split("x")
    
    # save current ui state
    save = generateSave()
    
    # close ui before test execution to not influence the result
    destroy_window()
    
    # run the tests on each framework
    testmanager.run_test(chosenFrameworks,
                         getActiveModifiers(), 
                         int(minBunniesEntry.get()), 
                         int(maxBunniesEntry.get()), 
                         int(stepSizeEntry.get()),
                         x,
                         y,
                         int(repetitionsEntry.get()))
                         
    # Restart the UI after test execution 
    import bunnysuite_gui
    bunnysuite_gui.vp_start_gui(save=save, deselected=deselected)

def getModifiers():
    # all state vars associated with checkboxes
    testModifiers = [animation,rotation,random,teleport,scaled,pulsation,tinted,colorchange]
    return getFlavours() + testModifiers + getTextureModifiers() + [no_output]
    
def getFlavours():
    # all state vars associated with flavour checkboxes
    return [bunnies,rectangles,circles,triangles,lines,points,texts]
    
def getTextureModifiers():
    # all state vars associated with texture modifying checkboxes
    return [multitexture,alpha,hdtexture,thin,texturechange]
    

        
def restoreFrameworks(deselected, selected):
    # puts deselected frameworks in the left list box and selected in the right one
    for d in deselected:
        w.possibleFrameworksList.insert(END, d)
    for s in selected:
        w.chosenFrameworksList.insert(END, s)
        
def getFrameworks():
    # Searches for subdirectories containing a 'bin' folder containing App.jar/App.exe
    import os
    frameworks = []    
    for directory in next(os.walk('.'))[1]:
        if 'bin' in next(os.walk(directory))[1]:
            for fname in os.listdir(directory+'/bin'):
                if fname == 'App.exe' or fname == 'App.jar':
                    frameworks.append(directory)
                    break
    return frameworks
        




