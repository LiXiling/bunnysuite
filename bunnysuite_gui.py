#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.7
# In conjunction with Tcl version 8.6
#    Aug 17, 2016 09:40:46 AM

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import gui_support, tooltip

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    root.resizable(0,0)
    gui_support.set_Tk_var()
    top = Bunnysuite (root)
    gui_support.init(root, top)
    root.mainloop()

w = None
def create_Bunnysuite(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    gui_support.set_Tk_var()
    top = Bunnysuite (w)
    gui_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Bunnysuite():
    global w
    w.destroy()
    w = None

class Bunnysuite:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        self.style = ttk.Style()
        #if sys.platform == "win32":
        #    self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("306x600+451+38")
        top.title("Bunnysuite 1.0")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")


        ### Framework selection ###

        self.frameworksFrame = ttk.Frame(top)
        self.frameworksFrame.place(relx=0.07, rely=0.04, relheight=0.23
                , relwidth=0.86)
        self.frameworksFrame.configure(relief=GROOVE,
                                       borderwidth="2",
                                       width=265)

        self.frameworksLabel = ttk.Label(self.frameworksFrame)
        self.frameworksLabel.place(relx=0.04, rely=0.05, height=19, width=86)
        self.frameworksLabel.configure(background=_bgcolor,
                                       foreground="#000000",
                                       relief=FLAT,
                                       text='''Frameworks''',
                                       width=86)

        self.possibleFrameworksLabel = ttk.Label(self.frameworksFrame)
        self.possibleFrameworksLabel.place(relx=0.04, rely=0.2, height=19
                , width=56)
        self.possibleFrameworksLabel.configure(background=_bgcolor,
                                               foreground="#000000",
                                               relief=FLAT,
                                               text='''possible''',
                                               width=56)
                                               
        self.possibleFrameworksList = ScrolledListBox(self.frameworksFrame)
        self.possibleFrameworksList.place(relx=0.04, rely=0.34, relheight=0.56
                , relwidth=0.38)
        self.possibleFrameworksList.configure(background="white",
                                              disabledforeground="#a3a3a3",
                                              font="TkFixedFont",
                                              foreground="black",
                                              highlightbackground="#d9d9d9",
                                              highlightcolor="#d9d9d9",
                                              selectbackground="#c4c4c4",
                                              selectforeground="black",
                                              selectmode=EXTENDED,
                                              width=10)

        self.chosenFrameworksLabel = ttk.Label(self.frameworksFrame)
        self.chosenFrameworksLabel.place(relx=0.57, rely=0.2, height=19
                , width=56)
        self.chosenFrameworksLabel.configure(background=_bgcolor,
                                             foreground="#000000",
                                             relief=FLAT,
                                             text='''chosen''',
                                             width=56)

        self.chosenFrameworksList = ScrolledListBox(self.frameworksFrame)
        self.chosenFrameworksList.place(relx=0.57, rely=0.34, relheight=0.56
                , relwidth=0.38)
        self.chosenFrameworksList.configure(background="white",
                                            disabledforeground="#a3a3a3",
                                            font="TkFixedFont",
                                            foreground="black",
                                            highlightbackground="#d9d9d9",
                                            highlightcolor="#d9d9d9",
                                            selectbackground="#c4c4c4",
                                            selectforeground="black",
                                            selectmode=EXTENDED,
                                            width=10)

        self.chooseButton = ttk.Button(self.frameworksFrame)
        self.chooseButton.place(relx=0.45, rely=0.41, height=25, width=23)
        self.chooseButton.configure(command=gui_support.cmdChoose,
                                    text='''>''',
                                    width=26)
        tooltip.createToolTip(self.chooseButton, "include selected frameworks in the test")

        self.unchooseButton = ttk.Button(self.frameworksFrame)
        self.unchooseButton.place(relx=0.45, rely=0.64, height=25, width=23)
        self.unchooseButton.configure(command=gui_support.cmdUnchoose,
                                      text='''<''',
                                      width=26)
        tooltip.createToolTip(self.unchooseButton, "exclude selected frameworks from the test")

                                             
        ### Modifier selection ###
                                             
        self.modifierFrame = ttk.Frame(top)
        self.modifierFrame.place(relx=0.07, rely=0.29, relheight=0.21
                , relwidth=0.86)
        self.modifierFrame.configure(borderwidth="2",
                                     relief=GROOVE,
                                     width=265)

        self.modifiersLabel = ttk.Label(self.modifierFrame)
        self.modifiersLabel.place(relx=0.04, rely=0.08, height=19, width=79)
        self.modifiersLabel.configure(background=_bgcolor,
                                      foreground="#000000",
                                      relief=FLAT,
                                      text='''Test modifiers''')
                                      
        self.style.map('TCheckbutton',background=
            [('selected', _bgcolor), ('active',_ana2color)])
        self.checkAnimation = ttk.Checkbutton(self.modifierFrame)
        self.checkAnimation.place(relx=0.04, rely=0.24, relwidth=0.33
                , relheight=0.0, height=21)
        self.checkAnimation.configure(variable=gui_support.animation,
                                      onvalue="animation",
                                      offvalue="",
                                      text='''animation''')
        tooltip.createToolTip(self.checkAnimation, "Bunnies are drawn at the upper left corner. Each bunny is initialized with a random speed value in X and Y direction. Once a bunny reaches the border of the frame, its direction is reversed. It is also affected by gravity. Both X and Y speed have a max value. With each frame the position of each bunny is updated according to its speed. This gives the illusion of a jumping animation.")

        self.checkScaled = ttk.Checkbutton(self.modifierFrame)
        self.checkScaled.place(relx=0.04, rely=0.4, relwidth=0.29, relheight=0.0
                , height=21)
        self.checkScaled.configure(variable=gui_support.scaled,
                                   onvalue="scaled",
                                   offvalue="",
                                   text='''scaled''')
        tooltip.createToolTip(self.checkScaled, "Bunnies are drawn at a random fixed position. With each frame, the scale of each bunny is changed (initial growth +0.1). Once the scale >=5 or <=0.2, the growth rate is multiplied by -1.")

        self.checkRandom = ttk.Checkbutton(self.modifierFrame)
        self.checkRandom.place(relx=0.04, rely=0.72, relwidth=0.32, relheight=0.0
                , height=21)
        self.checkRandom.configure(variable=gui_support.random,
                                   onvalue="random",
                                   offvalue="",
                                   text='''random''')
        tooltip.createToolTip(self.checkRandom, "Bunnies are drawn each frame at a new, random position.")

        self.checkRotated = ttk.Checkbutton(self.modifierFrame)
        self.checkRotated.place(relx=0.04, rely=0.56, relwidth=0.31
                , relheight=0.0, height=21)
        self.checkRotated.configure(variable=gui_support.rotated,
                                    onvalue="rotated",
                                    offvalue="",
                                    text='''rotated''')
        tooltip.createToolTip(self.checkRotated, "Bunnies rotate clockwise by 1 degree each frame.")

        self.checkMultitexture = ttk.Checkbutton(self.modifierFrame)
        self.checkMultitexture.place(relx=0.49, rely=0.24, relwidth=0.37
                , relheight=0.0, height=21)
        self.checkMultitexture.configure(variable=gui_support.multitexture,
                                         onvalue="multitexture",
                                         offvalue="",
                                         text='''multitexture''')
        tooltip.createToolTip(self.checkMultitexture, "Bunnies are drawn at a random fixed position. Each bunny has a fixed texture, chosen randomly from all available textures.")

        self.checkTexturechange = ttk.Checkbutton(self.modifierFrame)
        self.checkTexturechange.place(relx=0.49, rely=0.4, relwidth=0.41
                , relheight=0.0, height=21)
        self.checkTexturechange.configure(variable=gui_support.texturechange,
                                          onvalue="texturechange",
                                          offvalue="",
                                          text='''texturechange''')
        tooltip.createToolTip(self.checkTexturechange, "Bunnies are drawn at a random fixed position. With each frame each bunny changes its texture randomly to one of the available textures.")                                 

        self.checkAlpha = ttk.Checkbutton(self.modifierFrame)
        self.checkAlpha.place(relx=0.49, rely=0.56, relwidth=0.31, relheight=0.0
                , height=21)
        self.checkAlpha.configure(variable=gui_support.alpha,
                                  onvalue="alpha",
                                  offvalue="",
                                  text='''alpha''')
        tooltip.createToolTip(self.checkAlpha, "Adds texture with lots of alpha values to the texture pool.")

        self.checkHd = ttk.Checkbutton(self.modifierFrame)
        self.checkHd.place(relx=0.49, rely=0.72, relwidth=0.22, relheight=0.0
                , height=21)
        self.checkHd.configure(variable=gui_support.hd,
                               onvalue="hd",
                               offvalue="",
                               text='''hd''')
        tooltip.createToolTip(self.checkHd, "Adds high resolution texture to the texture pool. The texture is downscaled before rendering.")


        ### Arguments selection ###

        self.argumentsFrame = ttk.Frame(top)
        self.argumentsFrame.place(relx=0.07, rely=0.52, relheight=0.24
                , relwidth=0.86)
        self.argumentsFrame.configure(borderwidth="2",
                                      relief=GROOVE,
                                      width=265)
        
        self.minBunniesLabel = ttk.Label(self.argumentsFrame)
        self.minBunniesLabel.place(relx=0.04, rely=0.07, height=19, width=90)
        self.minBunniesLabel.configure(background=_bgcolor,
                                       foreground="#000000",
                                       relief=FLAT,
                                       text='''min bunnies''')
        tooltip.createToolTip(self.minBunniesLabel, "the amount of bunnies the test starts with")
        
        self.minBunniesScale = ttk.Scale(self.argumentsFrame)
        self.minBunniesScale.place(relx=0.38, rely=0.07, relwidth=0.38
                , relheight=0.0, height=26)
        self.minBunniesScale.configure(command=gui_support.cmdMinBunnies,
                                       variable=gui_support.minBunnies,
                                       to="100000")
        
        self.minBunniesEntry = ttk.Entry(self.argumentsFrame)
        self.minBunniesEntry.place(relx=0.79, rely=0.07, relheight=0.14
                , relwidth=0.17)
        self.minBunniesEntry.configure(textvariable=gui_support.minBunniesEntry,
                                       validate="all",
                                       validatecommand=(root.register(gui_support.validateMinBunnies), '%P', '%V'),
                                       width=46,
                                       cursor="heart")
        
        self.maxBunniesLabel = ttk.Label(self.argumentsFrame)
        self.maxBunniesLabel.place(relx=0.04, rely=0.28, height=19, width=86)
        self.maxBunniesLabel.configure(background=_bgcolor,
                                       foreground="#000000",
                                       relief=FLAT,
                                       text='''max bunnies''')
        tooltip.createToolTip(self.maxBunniesLabel, "the amount of bunnies at which the test terminates")

        self.maxBunniesScale = ttk.Scale(self.argumentsFrame)
        self.maxBunniesScale.place(relx=0.38, rely=0.28, relwidth=0.38
                , relheight=0.0, height=26)
        self.maxBunniesScale.configure(command=gui_support.cmdMaxBunnies,
                                       variable=gui_support.maxBunnies,
                                       to="100000",
                                       value="20000")
        
        self.maxBunniesEntry = ttk.Entry(self.argumentsFrame)
        self.maxBunniesEntry.place(relx=0.79, rely=0.28, relheight=0.14
                , relwidth=0.17)
        self.maxBunniesEntry.configure(textvariable=gui_support.maxBunniesEntry,
                                       validate="all",
                                       validatecommand=(root.register(gui_support.validateMaxBunnies), '%P', '%V'),
                                       width=46,
                                       cursor="heart")

        self.stepSizeLabel = ttk.Label(self.argumentsFrame)
        self.stepSizeLabel.place(relx=0.04, rely=0.48, height=19, width=56)
        self.stepSizeLabel.configure(background=_bgcolor,
                                     foreground="#000000",
                                     relief=FLAT,
                                     text='''step size''')
        tooltip.createToolTip(self.stepSizeLabel, "the amount of bunnies that is added each step")
        
        self.stepSizeScale = ttk.Scale(self.argumentsFrame)
        self.stepSizeScale.place(relx=0.38, rely=0.48, relwidth=0.38
                , relheight=0.0, height=26)
        self.stepSizeScale.configure(command=gui_support.cmdStepSize,
                                     variable=gui_support.stepSize,
                                     from_="1",
                                     to="10000",
                                     value="1000")
        
        self.stepSizeEntry = ttk.Entry(self.argumentsFrame)
        self.stepSizeEntry.place(relx=0.79, rely=0.48, relheight=0.14
                , relwidth=0.17)
        self.stepSizeEntry.configure(textvariable=gui_support.stepSizeEntry,
                                     validate="all",
                                     validatecommand=(root.register(gui_support.validateStepSize), '%P', '%V'),
                                     width=46,
                                     cursor="heart")

        self.resolutionLabel = ttk.Label(self.argumentsFrame)
        self.resolutionLabel.place(relx=0.04, rely=0.76, height=19, width=77)
        self.resolutionLabel.configure(background=_bgcolor,
                                       foreground="#000000",
                                       relief=FLAT,
                                       text='''resolution''',
                                       width=77)

        self.resCombobox = ttk.Combobox(self.argumentsFrame)
        self.resCombobox.place(relx=0.38, rely=0.76, relheight=0.14
                , relwidth=0.58)
        self.resCombobox.configure(textvariable=gui_support.resolution,
                                   width=153,
                                   background="#000000",
                                   state="readonly",
                                   values=["640x480","800x600","1280x720","1680x1050","1920x1080"])


        ### Presets selection ###

        self.presetsFrame = ttk.Frame(top)
        self.presetsFrame.place(relx=0.07, rely=0.78, relheight=0.13
                , relwidth=0.86)
        self.presetsFrame.configure(relief=GROOVE,
                                    borderwidth="2",
                                    width=265)

        self.presetsCheckbox = ttk.Checkbutton(self.presetsFrame)
        self.presetsCheckbox.place(relx=0.04, rely=0.13, relwidth=0.35
                , relheight=0.0, height=21)
        self.presetsCheckbox.configure(variable=gui_support.presets,
                                       command=gui_support.cmdTogglePresets,
                                       text='''Use presets''')

        self.presetsCombobox = ttk.Combobox(self.presetsFrame)
        self.presetsCombobox.place(relx=0.04, rely=0.53, relheight=0.33
                , relwidth=0.58)
        self.presetsCombobox.configure(state=DISABLED,
                                       textvariable=gui_support.presetsCombobox,
                                       width=153,
                                       validate="key",
                                       validatecommand=(root.register(gui_support.validatePreset), '%P'),
                                       postcommand=gui_support.updatePresets)
        self.presetsCombobox.bind("<<ComboboxSelected>>", gui_support.presetSelection)

        self.saveButton = ttk.Button(self.presetsFrame)
        self.saveButton.place(relx=0.68, rely=0.53, height=25, width=76)
        self.saveButton.configure(command=gui_support.cmdSave,
                                  text='''Save''',
                                  state=DISABLED)
                                             
                                             
                                             
        self.runButton = ttk.Button(top)
        self.runButton.place(relx=0.33, rely=0.93, height=25, width=116)
        self.runButton.configure(command=gui_support.cmdRun,
                                 text='''Run''')
                                 
                                 
                                 
# The following code is added to facilitate the Scrolled widgets.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=self._autoscroll(vsb),
        #    xscrollcommand=self._autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)
       

if __name__ == '__main__':
    vp_start_gui()




