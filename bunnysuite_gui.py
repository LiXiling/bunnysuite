#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.7
# In conjunction with Tcl version 8.6
#    Aug 10, 2016 07:45:33 PM
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import gui_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    gui_support.set_Tk_var()
    top = Bunnysuite (root)
    gui_support.init(root, top)
    root.mainloop()

w = None
def create_Bunnysuite(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    gui_support.set_Tk_var()
    top = Bunnysuite (w)
    gui_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Bunnysuite():
    global w
    w.destroy()
    w = None


class Bunnysuite:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("306x296+364+91")
        top.title("Bunnysuite")
        top.configure(background="#d9d9d9")



        self.framePresets = ttk.Frame(top)
        self.framePresets.place(relx=0.07, rely=0.51, relheight=0.35
                , relwidth=0.87)
        self.framePresets.configure(relief=GROOVE)
        self.framePresets.configure(borderwidth="2")
        self.framePresets.configure(relief=GROOVE)
        self.framePresets.configure(width=265)

        self.TLabel2 = ttk.Label(self.framePresets)
        self.TLabel2.place(relx=0.04, rely=0.1, height=19, width=90)
        self.TLabel2.configure(background=_bgcolor)
        self.TLabel2.configure(foreground="#000000")
        self.TLabel2.configure(relief=FLAT)
        self.TLabel2.configure(text='''min bunnies''')
        self.TLabel2.configure(width=90)

        self.TLabel3 = ttk.Label(self.framePresets)
        self.TLabel3.place(relx=0.04, rely=0.38, height=19, width=86)
        self.TLabel3.configure(background=_bgcolor)
        self.TLabel3.configure(foreground="#000000")
        self.TLabel3.configure(relief=FLAT)
        self.TLabel3.configure(text='''max bunnies''')
        self.TLabel3.configure(width=86)

        self.scaleMinBunnies = ttk.Scale(self.framePresets)
        self.scaleMinBunnies.place(relx=0.38, rely=0.1, relwidth=0.38
                , relheight=0.0, height=26)
        self.scaleMinBunnies.configure(command=gui_support.cmdMinBunnies)
        self.scaleMinBunnies.configure(variable=gui_support.minBunnies)
        self.scaleMinBunnies.configure(to="50000")
        self.scaleMinBunnies.configure(takefocus="")

        self.scaleMaxBunnies = ttk.Scale(self.framePresets)
        self.scaleMaxBunnies.place(relx=0.38, rely=0.38, relwidth=0.38
                , relheight=0.0, height=26)
        self.scaleMaxBunnies.configure(command=gui_support.cmdMaxBunnies)
        self.scaleMaxBunnies.configure(variable=gui_support.maxBunnies)
        self.scaleMaxBunnies.configure(to="50000")
        self.scaleMaxBunnies.configure(value="20000")
        self.scaleMaxBunnies.configure(takefocus="")

        self.scaleStepSize = ttk.Scale(self.framePresets)
        self.scaleStepSize.place(relx=0.38, rely=0.67, relwidth=0.38
                , relheight=0.0, height=26)
        self.scaleStepSize.configure(command=gui_support.cmdStepSize)
        self.scaleStepSize.configure(variable=gui_support.stepSize)
        self.scaleStepSize.configure(from_="1")
        self.scaleStepSize.configure(to="10000")
        self.scaleStepSize.configure(value="1000")
        self.scaleStepSize.configure(takefocus="")

        self.TLabel4 = ttk.Label(self.framePresets)
        self.TLabel4.place(relx=0.04, rely=0.67, height=19, width=56)
        self.TLabel4.configure(background=_bgcolor)
        self.TLabel4.configure(foreground="#000000")
        self.TLabel4.configure(relief=FLAT)
        self.TLabel4.configure(text='''step size''')
        self.TLabel4.configure(width=56)

        self.TLabel5 = ttk.Label(self.framePresets)
        self.TLabel5.place(relx=0.79, rely=0.1, height=19, width=46)
        self.TLabel5.configure(background=_bgcolor)
        self.TLabel5.configure(foreground="#000000")
        self.TLabel5.configure(relief=FLAT)
        self.TLabel5.configure(anchor=E)
        self.TLabel5.configure(justify=LEFT)
        self.TLabel5.configure(textvariable=gui_support.minBunniesLabel)
        self.TLabel5.configure(width=46)

        self.TLabel6 = ttk.Label(self.framePresets)
        self.TLabel6.place(relx=0.79, rely=0.38, height=19, width=46)
        self.TLabel6.configure(background=_bgcolor)
        self.TLabel6.configure(foreground="#000000")
        self.TLabel6.configure(relief=FLAT)
        self.TLabel6.configure(anchor=E)
        self.TLabel6.configure(textvariable=gui_support.maxBunniesLabel)
        self.TLabel6.configure(width=46)

        self.TLabel7 = ttk.Label(self.framePresets)
        self.TLabel7.place(relx=0.79, rely=0.67, height=19, width=46)
        self.TLabel7.configure(background=_bgcolor)
        self.TLabel7.configure(foreground="#000000")
        self.TLabel7.configure(relief=FLAT)
        self.TLabel7.configure(anchor=E)
        self.TLabel7.configure(textvariable=gui_support.stepSizeLabel)
        self.TLabel7.configure(width=46)

        self.TButton1 = ttk.Button(top)
        self.TButton1.place(relx=0.62, rely=0.88, height=25, width=76)
        self.TButton1.configure(command=gui_support.cmdRun)
        self.TButton1.configure(takefocus="")
        self.TButton1.configure(text='''Run''')

        self.frameModifiers = ttk.Frame(top)
        self.frameModifiers.place(relx=0.07, rely=0.03, relheight=0.42
                , relwidth=0.87)
        self.frameModifiers.configure(relief=GROOVE)
        self.frameModifiers.configure(borderwidth="2")
        self.frameModifiers.configure(relief=GROOVE)
        self.frameModifiers.configure(width=265)

        self.style.map('TCheckbutton',background=
            [('selected', _bgcolor), ('active',_ana2color)])
        self.checkAnimation = ttk.Checkbutton(self.frameModifiers)
        self.checkAnimation.place(relx=0.04, rely=0.24, relwidth=0.33
                , relheight=0.0, height=21)
        self.checkAnimation.configure(variable=gui_support.animation)
        self.checkAnimation.configure(onvalue="animation")
        self.checkAnimation.configure(offvalue="")
        self.checkAnimation.configure(command=gui_support.cmdCheck)
        self.checkAnimation.configure(takefocus="")
        self.checkAnimation.configure(text='''animation''')
        self.checkAnimation.configure(width=87)

        self.checkScaled = ttk.Checkbutton(self.frameModifiers)
        self.checkScaled.place(relx=0.04, rely=0.4, relwidth=0.29, relheight=0.0
                , height=21)
        self.checkScaled.configure(variable=gui_support.scaled)
        self.checkScaled.configure(onvalue="scaled")
        self.checkScaled.configure(offvalue="")
        self.checkScaled.configure(command=gui_support.cmdCheck)
        self.checkScaled.configure(takefocus="")
        self.checkScaled.configure(text='''scaled''')
        self.checkScaled.configure(width=76)

        self.checkRandom = ttk.Checkbutton(self.frameModifiers)
        self.checkRandom.place(relx=0.04, rely=0.72, relwidth=0.32, relheight=0.0
                , height=21)
        self.checkRandom.configure(variable=gui_support.random)
        self.checkRandom.configure(onvalue="random")
        self.checkRandom.configure(offvalue="")
        self.checkRandom.configure(command=gui_support.cmdCheck)
        self.checkRandom.configure(takefocus="")
        self.checkRandom.configure(text='''random''')
        self.checkRandom.configure(width=85)

        self.checkRotated = ttk.Checkbutton(self.frameModifiers)
        self.checkRotated.place(relx=0.04, rely=0.56, relwidth=0.31
                , relheight=0.0, height=21)
        self.checkRotated.configure(variable=gui_support.rotated)
        self.checkRotated.configure(onvalue="rotated")
        self.checkRotated.configure(offvalue="")
        self.checkRotated.configure(command=gui_support.cmdCheck)
        self.checkRotated.configure(takefocus="")
        self.checkRotated.configure(text='''rotated''')
        self.checkRotated.configure(width=81)

        self.checkMultitexture = ttk.Checkbutton(self.frameModifiers)
        self.checkMultitexture.place(relx=0.49, rely=0.24, relwidth=0.37
                , relheight=0.0, height=21)
        self.checkMultitexture.configure(variable=gui_support.multitexture)
        self.checkMultitexture.configure(onvalue="multitexture")
        self.checkMultitexture.configure(offvalue="")
        self.checkMultitexture.configure(command=gui_support.cmdCheck)
        self.checkMultitexture.configure(takefocus="")
        self.checkMultitexture.configure(text='''multitexture''')
        self.checkMultitexture.configure(width=97)

        self.checkTexturechange = ttk.Checkbutton(self.frameModifiers)
        self.checkTexturechange.place(relx=0.49, rely=0.4, relwidth=0.41
                , relheight=0.0, height=21)
        self.checkTexturechange.configure(variable=gui_support.texturechange)
        self.checkTexturechange.configure(onvalue="texturechange")
        self.checkTexturechange.configure(offvalue="")
        self.checkTexturechange.configure(command=gui_support.cmdCheck)
        self.checkTexturechange.configure(takefocus="")
        self.checkTexturechange.configure(text='''texturechange''')
        self.checkTexturechange.configure(width=108)

        self.checkAlpha = ttk.Checkbutton(self.frameModifiers)
        self.checkAlpha.place(relx=0.49, rely=0.56, relwidth=0.31, relheight=0.0
                , height=21)
        self.checkAlpha.configure(variable=gui_support.alpha)
        self.checkAlpha.configure(onvalue="alpha")
        self.checkAlpha.configure(offvalue="")
        self.checkAlpha.configure(command=gui_support.cmdCheck)
        self.checkAlpha.configure(takefocus="")
        self.checkAlpha.configure(text='''alpha''')
        self.checkAlpha.configure(width=82)

        self.checkHd = ttk.Checkbutton(self.frameModifiers)
        self.checkHd.place(relx=0.49, rely=0.72, relwidth=0.22, relheight=0.0
                , height=21)
        self.checkHd.configure(variable=gui_support.hd)
        self.checkHd.configure(onvalue="hd")
        self.checkHd.configure(offvalue="")
        self.checkHd.configure(command=gui_support.cmdCheck)
        self.checkHd.configure(takefocus="")
        self.checkHd.configure(text='''hd''')
        self.checkHd.configure(width=57)

        self.labelModifiers = ttk.Label(self.frameModifiers)
        self.labelModifiers.place(relx=0.04, rely=0.08, height=19, width=79)
        self.labelModifiers.configure(background=_bgcolor)
        self.labelModifiers.configure(foreground="#000000")
        self.labelModifiers.configure(relief=FLAT)
        self.labelModifiers.configure(text='''Test modifiers''')






if __name__ == '__main__':
    vp_start_gui()



